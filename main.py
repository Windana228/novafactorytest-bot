import asyncio
import logging
import os
import json
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Google Sheets setup
SHEET_KEY = "1tqz3hfCDhLlMRQNOCAkfQQAgL1223zi4IjHZexkKDsg"
SHEET_NAME = "Responses"

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials_dict = json.loads(os.environ["GOOGLE_CREDENTIALS"])
credentials = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
client = gspread.authorize(credentials)
sheet = client.open_by_key(SHEET_KEY).worksheet(SHEET_NAME)

# Constants
PRICES = {
    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–ø—ñ–≤ (–†—É–±—á–∏–∫)": 60,
    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —à–æ—Ä—Ç—ñ–≤(–†—É–±—á–∏–∫)": 50,
    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –õ—ñ—Ñ–∏(–ö—É–ª—ñ—Ä)": 95,
    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä—É—Å–∏–∫—ñ–≤ (–°—Ç—Ä—ñ–≥–∏ —Ç–∞ –°–ª—ñ–ø–∏ –ö—É–ª—ñ—Ä)": 30,
    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–æ—Ä–æ—á–æ–∫ (–°–º—É–∂–∫–∞)": 250,
    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —à—Ç–∞–Ω—ñ–≤ (–°–º—É–∂–∫–∞)": 100,
    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —à–æ—Ä—Ç—ñ–≤ (—Å–º—É–∂–∫–∞)": 75,
    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—É—Ç–±–æ–ª–æ–∫ (Soft)": 45,
    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —à–æ—Ä—Ç—ñ–≤ (Soft)": 45
}

SEWERS = [
    "–°–≤—ñ—Ç–ª–∞–Ω–∞ –î–æ—Ä–æ—Ñ—î—î–≤–∞",
    "–°–≤—ñ—Ç–ª–∞–Ω–∞ –ö–∞–∑–∞–∫–µ–≤–∏—á",
    "–î–∞–Ω–∞ –†—É–¥–∞",
    "–ù–∞–¥—ñ—è –ö–æ–∑–∏—Ä—Å—å–∫–∞"
]

# States
(CHOOSING_NAME, CHOOSING_DATE_TYPE, ENTERING_DATE, ENTERING_ITEM_QUANTITIES, CONFIRMATION, MODIFY_FIELD) = range(6)

REGISTERED_USERS = []
BOT_TOKEN = "7686030914:AAGIE5IoO-roTln4nd_MUSKndPa4qxZuilc"

def generate_motivation(salary):
    for amount, msg in [
        (500, "üò¥ –õ–µ–≥–∫–∞ —Ä–æ–∑–º–∏–Ω–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ! –ó–∞–≤—Ç—Ä–∞ ‚Äî —Å–µ—Ä–π–æ–∑–Ω–∞ —à–≤–µ–π–Ω–∞ –∞—Ç–∞–∫–∞!"),
        (700, "üê¢ –ü–ª–∞–≤–Ω–∏–π —Ç–µ–º–ø ‚Äî –∞–ª–µ –º–∏ –∂ –Ω–µ —á–µ—Ä–µ–ø–∞—Ö–∞! –ó–∞–≤—Ç—Ä–∞ ‚Äî —à–≤–µ–π–Ω–∏–π —Å–ø—Ä–∏–Ω—Ç!"),
        (900, "üîß –î–æ–±—Ä–µ! –ê–ª–µ —Ç–∏ –∂ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≥–æ–ª–∫—É —Ç—Ä–∏–º–∞—î—à, –∞ –π –º–æ—Ç–∏–≤–∞—Ü—ñ—é!"),
        (1100, "üíº –í—Å–µ —Å–µ—Ä–π–æ–∑–Ω–æ! –£–∂–µ —à–≤–∞—á–∫–∞-–ø—Ä–æ—Ñ—ñ, —ñ–¥–µ–º–æ –¥–æ –¢–û–ü—É!"),
        (1300, "üöÄ –û–≥–æ, —Ç–∏ –≤–∂–µ –Ω–∞ —à–≤–µ–π–Ω—ñ–π –æ—Ä–±—ñ—Ç—ñ! –©–µ —Ç—Ä–æ—Ö–∏ ‚Äî —ñ –ø–æ–ª–µ—Ç–∏—à —É –±–æ–Ω—É—Å–∏!"),
        (1500, "üåü –¢–≤–æ—ó —Ä—É–∫–∏ ‚Äî —Ü–µ —à–≤–µ–π–Ω–∞ –∑–±—Ä–æ—è! –ë—Ä–∞–≤–æ, —â–µ 1 –¥–µ–Ω—å ‚Äî —ñ —Ä–µ–∫–æ—Ä–¥!"),
        (1700, "üßµ –ó–∞–ª–∏—à–∏–ª–æ—Å—å —Ç—ñ–ª—å–∫–∏ –¥–∏–º –∑-–ø—ñ–¥ –º–∞—à–∏–Ω–∫–∏! –°—É–ø–µ—Ä —Ç–µ–º–ø!"),
        (1900, "üî• –ì–∞—Ä—è—á–∏–π –¥–µ–Ω—å! –¢–∏ —è–∫ –ø—Ä–∞—Å–∫–∞ ‚Äî –±–µ–∑—É–ø–∏–Ω–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞!"),
        (2100, "üéØ –¢–∏ –ø—Ä–æ–±–∏–ª–∞ 2000 ‚Äî —Ü–µ —è–∫ –≤–∏–≥—Ä–∞—Ç–∏ —à–≤–µ–π–Ω—É –û–ª—ñ–º–ø—ñ–∞–¥—É!"),
        (2300, "üèÜ –ó–æ–ª–æ—Ç–∞ –≥–æ–ª–∫–∞! –©–µ –ø–∞—Ä—É –¥–Ω—ñ–≤ ‚Äî —ñ –±—É–¥–µ Rolls Royce!"),
        (2500, "üí∏ –ú–æ–∂–µ –≤–∂–µ —á–∞—Å –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –±—Ä–µ–Ω–¥? ü§©"),
        (2700, "üß® –¢–∏ –Ω–µ —à–∏—î—à ‚Äî —Ç–∏ –ª–µ—Ç–∏—à! Turbo-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!"),
        (2900, "üêé –ú–∞—à–∏–Ω–∫–∞ –ø–ª–∞–≤–∏—Ç—å—Å—è, –Ω–∞—á–∞–ª—å—Å—Ç–≤–æ –≤ —à–æ—Ü—ñ, –∑–∞—Ä–ø–ª–∞—Ç–∞ —Ä–æ—Å—Ç–µ!"),
        (3000, "üëë –¶–µ –≤–∂–µ —à–≤–µ–π–Ω–∏–π —Ç—Ä–æ–Ω! –ö–æ—Ä–æ–ª–µ–≤–∞ –≥–æ–ª–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ!")
    ]:
        if salary < amount:
            return msg
    return "ü§ë –í—Å–µ! –ó–∞–≤—Ç—Ä–∞ –Ω–µ –ø—Ä–∞—Ü—é–π ‚Äî –≤–∂–µ –º–æ–∂–Ω–∞ –≤ –ö–∞—Ä–ø–∞—Ç–∏ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏!"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(name)] for name in SEWERS]
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return CHOOSING_NAME

async def choose_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if name not in SEWERS:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–º‚Äô—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return CHOOSING_NAME
    context.user_data['name'] = name
    await update.message.reply_text(
        "–ó–∞ —è–∫–∏–π –¥–µ–Ω—å –≤–≤–æ–¥–∏–º–æ –¥–∞–Ω—ñ?",
        reply_markup=ReplyKeyboardMarkup([["–°—å–æ–≥–æ–¥–Ω—ñ"], ["–Ü–Ω—à–∞ –¥–∞—Ç–∞"]], resize_keyboard=True, one_time_keyboard=True)
    )
    return CHOOSING_DATE_TYPE

async def choose_date_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    if choice == "–°—å–æ–≥–æ–¥–Ω—ñ":
        context.user_data['date'] = datetime.now().strftime("%Y-%m-%d %H:%M")
        context.user_data['quantities'] = {}
        context.user_data['current_index'] = 0
        item = list(PRICES.keys())[0]
        await update.message.reply_text(item, reply_markup=ReplyKeyboardRemove())
        return ENTERING_ITEM_QUANTITIES
    elif choice == "–Ü–Ω—à–∞ –¥–∞—Ç–∞":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†", reply_markup=ReplyKeyboardRemove())
        return ENTERING_DATE
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.")
        return CHOOSING_DATE_TYPE

async def enter_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date = datetime.strptime(update.message.text.strip(), "%d.%m.%Y")
        context.user_data['date'] = date.strftime("%Y-%m-%d 00:00")
        context.user_data['quantities'] = {}
        context.user_data['current_index'] = 0
        item = list(PRICES.keys())[0]
        await update.message.reply_text(item, reply_markup=ReplyKeyboardRemove())
        return ENTERING_ITEM_QUANTITIES
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†")
        return ENTERING_DATE

async def enter_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.strip().lower() == "/stop":
        await update.message.reply_text("‚õîÔ∏è –í–≤–µ–¥–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    try:
        quantity = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        return ENTERING_ITEM_QUANTITIES

    if 'modify_target' in context.user_data:
        field = context.user_data.pop('modify_target')
        context.user_data['quantities'][field] = quantity
        return await confirm(update, context)

    item = list(PRICES.keys())[context.user_data['current_index']]
    context.user_data['quantities'][item] = quantity
    context.user_data['current_index'] += 1

    if context.user_data['current_index'] < len(PRICES):
        next_item = list(PRICES.keys())[context.user_data['current_index']]
        await update.message.reply_text(next_item)
        return ENTERING_ITEM_QUANTITIES
    else:
        return await confirm(update, context)

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    summary = "–û—Å—å —â–æ –≤–∏ –≤–≤–µ–ª–∏:\n"
    for k, v in context.user_data['quantities'].items():
        summary += f"{k}: {v}\n"
    keyboard = [["‚úÖ –¢–∞–∫"], ["‚úèÔ∏è –•–æ—á—É –∑–º—ñ–Ω–∏—Ç–∏"]]
    await update.message.reply_text(summary + "\n–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True))
    return CONFIRMATION

async def confirm_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text.strip()
    if response == "‚úÖ –¢–∞–∫":
        return await finalize_entry(update, context)
    elif response == "‚úèÔ∏è –•–æ—á—É –∑–º—ñ–Ω–∏—Ç–∏":
        items = [[item] for item in PRICES.keys()]
        await update.message.reply_text("–©–æ —Å–∞–º–µ –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=ReplyKeyboardMarkup(items, resize_keyboard=True, one_time_keyboard=True))
        return MODIFY_FIELD
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.")
        return CONFIRMATION

async def modify_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    field = update.message.text.strip()
    if field not in PRICES:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ–ª–µ –∑—ñ —Å–ø–∏—Å–∫—É.")
        return MODIFY_FIELD
    context.user_data['modify_target'] = field
    await update.message.reply_text(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è: {field}", reply_markup=ReplyKeyboardRemove())
    return ENTERING_ITEM_QUANTITIES

async def finalize_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data['name']
    date = context.user_data['date']
    quantities = context.user_data['quantities']
    total = sum(PRICES[k] * quantities.get(k, 0) for k in PRICES)
    row = [date, name] + [quantities.get(k, 0) for k in PRICES] + [total]
    sheet.append_row(row)
    motivation = generate_motivation(total)
    await update.message.reply_text(f"–î—è–∫—É—î–º–æ, {name}! –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total} –≥—Ä–Ω.\n{motivation}", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def send_reminders():
    try:
        app = Application.builder().token(BOT_TOKEN).build()
        bot = app.bot
        for uid in REGISTERED_USERS:
            bot.send_message(chat_id=uid, text="üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –í–∏ —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–∏–ª–∏ –¥–∞–Ω—ñ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –¶–µ –±—É–≤ —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å?")
    except Exception as e:
        logger.error(f"Reminder error: {e}")

async def main():
    application = Application.builder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_name)],
            CHOOSING_DATE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_date_type)],
            ENTERING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_date)],
            ENTERING_ITEM_QUANTITIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_quantity)],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_data)],
            MODIFY_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, modify_field)],
        },
        fallbacks=[]
    )
    application.add_handler(conv_handler)
    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: send_reminders(), 'cron', hour=18, timezone='Europe/Kyiv')
    scheduler.start()
    logger.info("Bot started.")
    await application.run_polling()

if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
